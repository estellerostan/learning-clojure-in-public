# Day 3

Today I read the third chapter of Clojure from the ground up and had more thoughts on methods to look for string patterns that were introduced in chapter 2.

## [Chapter 3 - Functions](https://aphyr.com/posts/303-clojure-from-the-ground-up-functions)

### Functions
I saw that example:
``` clojure
user=> (let [twice (fn [x] (* 2 x))]
         (+ (twice 1)
            (twice 3)))
;; 8
```
And 1) I was surprised to see a function used as a value of a let binding (coming from OOP) but still this example seems to not be commonly used in practice because there are better ways to define named functions
2) I thought that we might as well use def to make the function available globally instead of only inside the let
``` clojure
user=> (def twice (fn [x] (* 2 x))
         (+ (twice 1)
            (twice 3))
;; 8
```
3) later in the chapter we learn that it is how `defn` works! It creates a function and bind it to a var.
So the example above becomes:
``` clojure
user=> (defn twice [x] (* 2 x)
       (+ (twice 1)
          (twice 3))
;; 8
```

### `let` or `def`?
`let` when used inside a function to bind values to names
`def` when used to set up a program initially

## [Chapter 2 - Basic types](https://aphyr.com/posts/302-clojure-from-the-ground-up-basic-types) again

### `re-find` and `re-matches`
In Clojure `re-find` and `re-matches`return groups matching a pattern, this is different from Java (better) where you have to call the `group` method
separately from `find and `matches`.  

`re-find` reurns:  
- the next regex match if there are no parenthesized group
- OR a vector of groups that matched the parenthesized groups  

A parenthesized group or **capturing group** is, like in Java, characters grouped inside parenthesis, example from the book: `(.+):(.+)`  

So a modified example from the book:
``` clojure
user=> (re-find #"(.+):(.+)" "mouse:treat")
;; ["mouse:treat" "mouse" "treat"]
```
Yields the same result as
``` clojure
user=> (re-matches #"(.+):(.+)" "mouse:treat")
;; ["mouse:treat" "mouse" "treat"]
```
In practice, in most cases the first result containing the string matching the first group, so the whole pattern, is not useful and that's why we use `rest`
``` clojure
user=> (rest (re-matches #"(.+):(.+)" "mouse:treat"))
;; ("mouse" "treat")
```
